{"version":3,"sources":["firebase.js","components/ListLink.js","components/ListLinks.js","components/ListItem.js","components/ListContent.js","components/List.js","App.js","serviceWorker.js","index.js"],"names":["db","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","firestore","ListLink","changeList","props","changeListCallback","name","console","log","onClick","this","style","padding","color","fontSize","React","Component","ListLinks","changeBackground","e","target","className","changeBackgroundPurp","state","lists","id","map","list","href","onMouseOver","onMouseLeave","ListItem","handleCompletedTask","deleteCallback","changeColor","setState","iconClass","iconTextColor","changeColorBack","styleMap","margin","borderStyle","borderRadius","borderWidth","type","display","overflow","ListContent","handleNewItem","addingNew","handleCreateNewItem","input","document","getElementById","createCallback","value","closeNewItemMenu","classInput","classButton","items","length","item","class","height","width","backgroundColor","fontFamily","small","icon","floating","textAlign","List","prevProps","App","updateActiveList","activeList","createDocument","itemName","isItem","dateCreated","Date","collection","doc","user","add","then","docRef","itemArray","listContents","indexOf","push","deleteDocument","delete","index","listContentsArray","forEach","itemMap","splice","loading","listTypes","date","getDate","listArray","listTypeArray","orderBy","get","querySnapshot","queryDocumentSnapshot","ref","querySnapshotItems","listArrayOfItems","queryDocumentSnapshotItems","listItemMap","finally","month","getMonth","dayNum","fullDate","getDay","oldKey","newKey","element","s","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c5bae976.chunk.js","sourcesContent":["import firebase from\"firebase\";\r\n\r\nconst firebaseApp = firebase.initializeApp({\r\n    apiKey: \"AIzaSyDU01SWkJGnAM1Hv27ekul9E0MagZT-sA0\",\r\n\tauthDomain: \"planit-041100.firebaseapp.com\",\r\n\tdatabaseURL: \"https://planit-041100.firebaseio.com\",\r\n\tprojectId: \"planit-041100\",\r\n\tstorageBucket: \"planit-041100.appspot.com\",\r\n\tmessagingSenderId: \"978009145818\",\r\n\tappId: \"1:978009145818:web:8364d555100b53f9\"\r\n});\r\n\r\nconst db = firebaseApp.firestore();\r\n\r\nexport{db};","import React from 'react'\r\n\r\nclass ListLink extends React.Component {\r\n\r\n    changeList = () => {\r\n        this.props.changeListCallback(this.props.name);\r\n    }\r\n\r\n    render() {\r\n        console.log(\"\\t\\tListLink Rendered\");\r\n        return (\r\n            <div onClick={this.changeList} style={{padding:\"10px\", color:\"white\", fontSize:\"15pt\"}}>\r\n                {this.props.name}\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListLink;","import React from 'react';\r\nimport {Collection, CollectionItem} from 'react-materialize';\r\nimport ListLink from './ListLink.js'\r\n\r\nclass ListLinks extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lists : this.props.lists\r\n        }\r\n    }\r\n\r\n    changeBackground = (e) => {\r\n        e.target.className = \"collection-item deep-purple darken-3\";\r\n    }\r\n\r\n    changeBackgroundPurp = (e) => {\r\n        e.target.className = \"collection-item deep-purple\";\r\n    }\r\n\r\n    render() {\r\n        console.log(\"\\tListLinks Rendered\")\r\n        return(\r\n            <div id='list_of_lists'>\r\n                <Collection>\r\n                    {this.state.lists.map((list) => (\r\n                        <CollectionItem className=\"deep-purple\" style={{padding: \"0px\"}} href=\"#\" onMouseOver={this.changeBackground} onMouseLeave={this.changeBackgroundPurp}>\r\n                            <ListLink name={list} changeListCallback={this.props.changeListCallback}/>\r\n                        </CollectionItem>\r\n                    ))}\r\n                </Collection>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default ListLinks;","import React from 'react';\r\nimport { Button, Icon } from 'react-materialize';\r\n\r\nclass ListItem extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            iconTextColor: \"#505050\"\r\n        }\r\n    }\r\n\r\n    handleCompletedTask = () => {\r\n        console.log(\"handleCompletedTask\");\r\n        this.props.deleteCallback(this.props.id, true);\r\n    }\r\n\r\n    changeColor = (e) => {\r\n        console.log(\"handleCheckHover\");\r\n        this.setState({\r\n            iconClass: \"white\",\r\n            iconTextColor: \"#00FF7F\"\r\n        })\r\n    }\r\n\r\n    changeColorBack = (e) => {\r\n        console.log(\"handleCheckHover\");\r\n        this.setState({\r\n            iconTextColor: \"#505050\"\r\n        })\r\n    }\r\n\r\n    render() {\r\n        let styleMap = {\r\n            margin: \"0rem 0rem 15px 0rem\",\r\n            padding: \"0 0 0rem 0\",\r\n            borderStyle: \"solid\",\r\n            borderRadius: \"0px 0px 5px 0px\",\r\n            borderWidth: \"0px 0px 1px 0px\",\r\n        };\r\n        switch (this.props.type) {\r\n            case 0: return (\r\n                <div style={styleMap}>\r\n                    <div style={{ margin: \"0px 5px\", padding:\"0px\", display: \"inline\" }}>\r\n                        <a href=\"#\" style={{ color: this.state.iconTextColor, margin:\"10px\" }} onMouseOver={this.changeColor} onMouseLeave={this.changeColorBack} onClick={this.handleCompletedTask}>\r\n                            <Icon className=\"grey darken-4\">check</Icon>\r\n                        </a>\r\n                    </div>\r\n                    <div style={{ display: \"inline\", fontSize: \"16pt\", overflow: \"auto\" }}>\r\n                        {this.props.name}\r\n                    </div>\r\n                </div>\r\n            );\r\n            default: return (\r\n                <div style={styleMap}>Unsupported Item Type</div>\r\n            );\r\n        }\r\n    }\r\n}\r\n\r\nexport default ListItem;","import React from 'react';\r\nimport { CardPanel, Button, Icon} from 'react-materialize';\r\nimport ListItem from './ListItem.js'\r\n\r\nclass ListContent extends React.Component {\r\n    constructor(props){\r\n        super(props);\r\n        this.state = {\r\n            addingNew : false\r\n        }\r\n    }\r\n\r\n    handleNewItem = () => {\r\n        console.log(\"handleNewItem\");\r\n        this.setState({\r\n            addingNew : true\r\n        })\r\n    }\r\n\r\n    handleCreateNewItem = () => {\r\n        let input = document.getElementById(\"new-item-name\");\r\n        this.props.createCallback(input.value, true);\r\n        this.closeNewItemMenu();\r\n    }\r\n\r\n    closeNewItemMenu = () => {\r\n        document.getElementById(\"new-item-name\").value = \"\";\r\n        this.setState({\r\n            addingNew : false\r\n        });\r\n    }\r\n\r\n    render() {\r\n        let styleMap = {\r\n            margin: \"0rem 0rem 15px 0rem\",\r\n            padding: \"0 .5rem 0 1rem\",\r\n            borderStyle: \"solid\",\r\n            borderRadius: \"0px 0px 5px 0px\",\r\n            borderWidth: \"0px 0px 1px 0px\",\r\n        };\r\n\r\n        let classInput = this.state.addingNew ? \"\" : \"hidden\";\r\n        let classButton = this.state.addingNew ? \"hidden\" : \"\";\r\n\r\n        if (this.props.items.length === 0)\r\n            return (\r\n                <CardPanel className=\"grey darken-3\" style={{ padding: \"5px 0px 5px 0px\" }}>\r\n                    <div>This list is empty! I am still deciding how to display empty lists</div>\r\n                </CardPanel>\r\n            );\r\n        switch (this.props.type) {\r\n            case 0: \r\n                return (\r\n                    <CardPanel className=\"grey darken-3\" style={{ padding: \"5px 0px 5px 0px\" }}>\r\n                        <div>\r\n                            <ul id=\"list-items\">\r\n                                {this.props.items.map((item) => (\r\n                                    <li>\r\n                                        <ListItem\r\n                                            name={item.name}\r\n                                            type={item.type}\r\n                                            id={item.id}\r\n                                            deleteCallback={this.props.deleteCallback}\r\n                                        />\r\n                                    </li>\r\n                                ))}\r\n                            </ul>\r\n                        </div>\r\n                        <div style={styleMap} class={classInput}>\r\n                            <input id=\"new-item-name\" type=\"text\" style={{height: \"25px\", width:\"86.5%\", backgroundColor: \"grey\", borderWidth: \"0\", color: \"white\", margin:\"0 0rem .5rem 0\", padding:\"0\", fontFamily: \"Comfortaa, cursive\", display: \"inline\"}}/>\r\n                            <Button \r\n                                small \r\n                                className=\"green\"\r\n                                icon={<Icon>check</Icon>}\r\n                                style={{margin: \"0 0 5px 5px\"}}\r\n                                onClick={this.handleCreateNewItem}>\r\n\r\n                            </Button>\r\n                            <Button \r\n                                small \r\n                                className=\"red\"\r\n                                icon={<Icon>close</Icon>}\r\n                                style={{margin: \"0 0 5px 5px\"}}\r\n                                onClick={this.closeNewItemMenu}>\r\n\r\n                            </Button>\r\n                        </div>\r\n                        <div class={classButton}style={{ margin: \"0 0 5px 5px\" }}>\r\n                            <Button\r\n                                className=\"light-blue\"\r\n                                floating\r\n                                small\r\n                                style={{ color: \"black\", fontSize: \"15pt\", padding: \"0 0 0 0\", textAlign: \"center\" }}\r\n                                icon={<Icon>add</Icon>}\r\n                                onClick={this.handleNewItem}\r\n                            >\r\n                            </Button>\r\n                        </div>\r\n                    </CardPanel>\r\n                );\r\n            default: return (<div>This list type is unsupported as of now. Currently, the only supported type is a simple checklist</div>);\r\n        }\r\n    }\r\n}\r\n\r\nexport default ListContent;","import React from 'react';\r\nimport { Button, Icon } from 'react-materialize';\r\nimport ListContent from './ListContent'\r\n\r\nclass List extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            items: this.props.items\r\n        }\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if (prevProps.items !== this.props.items) this.setState({ items: this.props.items });\r\n    }\r\n\r\n    render() {\r\n        console.log(\"\\tList Rendered\");\r\n        return (\r\n            <div style={{ margin: \"1rem\" }}>\r\n                <div id='list-name' style={{ display: \"inline\" }}>\r\n                    <h4 style={{ display: \"inline\" }}>{this.props.name}</h4>\r\n                </div>\r\n                <div id=\"content\">\r\n                    <ListContent\r\n                        type={this.props.type}\r\n                        items={this.state.items}\r\n                        deleteCallback={this.props.deleteCallback}\r\n                        createCallback={this.props.createCallback}\r\n                    />\r\n                </div >\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default List;","import React from 'react';\nimport { Container, Row, Col } from 'react-materialize';\nimport { db } from './firebase.js'\nimport './App.css';\nimport ListLinks from './components/ListLinks.js'\nimport List from './components/List.js'\n\nclass App extends React.Component { //Will have to refactor to support lists vs schedules.\n    constructor() {\n        super();\n        let userName = 'admin';\n        this.state = {\n            loading: true,\n            activeList: null,\n            user: userName,\n            lists: [],\n            listContents: [],\n            listTypes: [],\n            date: this.getDate()\n        };\n    }\n\n    componentDidMount() {\n        console.log(\"App did mount\");\n        /**\n         * Save the names of the lists by order of key (key specifies the position of the list) and grab the contents of the list types. (will have to change in future based off of type)\n         */\n        let listArray = this.state.lists;\n        let listContentsArray = this.state.listContents;\n        let listTypeArray = this.state.listTypes;\n        db.collection('users').doc(this.state.user).collection('lists').orderBy(\"key\").get()\n            .then((querySnapshot) => {\n                querySnapshot.forEach((queryDocumentSnapshot) => {\n                    listArray.push(queryDocumentSnapshot.id); //Gets name of list\n                    listTypeArray.push(queryDocumentSnapshot.get(\"type\"));\n                    queryDocumentSnapshot.ref.collection(\"items\").orderBy(\"dateCreated\").get() //Iterates through all the items of a list\n                        .then((querySnapshotItems) => {\n                            let listArrayOfItems = [];\n                            querySnapshotItems.forEach((queryDocumentSnapshotItems) => { //******Will have to be revisited when accounting for different list types*/\n                                let listItemMap = {};\n                                listItemMap.name = queryDocumentSnapshotItems.get(\"name\");\n                                listItemMap.dateCreated = queryDocumentSnapshotItems.get(\"dateCreated\");\n                                listItemMap.type = queryDocumentSnapshotItems.get(\"type\");\n                                listItemMap.id = queryDocumentSnapshotItems.id;\n                                listArrayOfItems.push(listItemMap);\n                            });\n                            listContentsArray.push(listArrayOfItems);\n                        }).finally(() => {\n                            this.setState({\n                                loading: false,\n                                listContents: listContentsArray\n                            });\n                        });\n                });\n\n            }).finally(() => {\n                this.setState({\n                    loading: true ? true : false,\n                    activeList: \"todoList\",\n                    lists: listArray,\n                    listTypes: listTypeArray,\n                });\n            });\n    }\n\n    getDate() {\n        let date = new Date();\n        let month = date.getMonth();\n        let dayNum = date.getDate();\n        let day = date.getDay();\n        let fullDate = \"\";\n\n        switch (day) {\n            case 0: fullDate += \"Sunday\";\n                break;\n            case 1: fullDate += \"Monday\";\n                break;\n            case 2: fullDate += \"Tuesday\";\n                break;\n            case 3: fullDate += \"Wednesday\";\n                break;\n            case 4: fullDate += \"Thursday\";\n                break;\n            case 5: fullDate += \"Friday\";\n                break;\n            case 6: fullDate += \"Saturday\";\n                break;\n        }\n\n        fullDate += \", \"\n\n        switch (month) {\n            case 0: fullDate += \"January\";\n                break;\n            case 1: fullDate += \"February\";\n                break;\n            case 2: fullDate += \"March\";\n                break;\n            case 3: fullDate += \"April\";\n                break;\n            case 4: fullDate += \"May\";\n                break;\n            case 5: fullDate += \"June\";\n                break;\n            case 6: fullDate += \"July\";\n                break;\n            case 7: fullDate += \"August\";\n                break;\n            case 8: fullDate += \"September\";\n                break;\n            case 9: fullDate += \"October\";\n                break;\n            case 10: fullDate += \"November\";\n                break;\n            case 11: fullDate += \"December\";\n                break;\n        }\n\n        fullDate += \" \" + dayNum;\n        return fullDate;\n    }\n\n    updateListsOrder(oldKey, newKey) {\n        let listArray = this.state.lists;\n        let element = listArray[oldKey];\n        if (oldKey >= newKey) {\n            listArray.splice(oldKey, 1);\n            listArray.splice(newKey, 0, element);\n        } else {\n            listArray.splice(oldKey, 1);\n            listArray.splice(newKey, 0, element);\n        }\n        this.setState({ lists: listArray });\n    }\n\n    /**\n     * Callback function for ListLinks to change the name of the active list to whicheever list was clicked on\n     */\n    updateActiveList = (list) => {\n        this.setState({\n            activeList: list\n        });\n    }\n\n    createDocument = (itemName, isItem) => {\n        if(isItem) {\n            let item = {\n                dateCreated: new Date(),\n                name: itemName,\n                type: 0\n            }\n            db.collection(\"users\").doc(this.state.user).collection(\"lists\").doc(this.state.activeList).collection(\"items\").add(item)\n                .then((docRef) => {\n                    console.log(\"Created new item\");\n                    item.id = docRef.id;\n                    let itemArray = this.state.listContents;\n                    itemArray[this.state.lists.indexOf(this.state.activeList)].push(item);\n                    this.setState({\n                        listContents : itemArray\n                    });\n                });\n        }\n    }\n\n    deleteDocument = (id, isItem) => {\n        if(isItem) {\n            db.collection(\"users\").doc(this.state.user).collection(\"lists\").doc(this.state.activeList).collection(\"items\").doc(id).delete()\n                .then(() => {\n                    console.log(\"Deleting item \" + id + \" from Firestore\");\n                    let index = this.state.lists.indexOf(this.state.activeList);\n                    let listContentsArray = this.state.listContents;\n                    listContentsArray[index].forEach((itemMap) => {\n                        if(itemMap.id === id){\n                            listContentsArray[index].splice(listContentsArray[index].indexOf(itemMap), 1);\n                        }\n                    })\n                    this.setState({\n                        listContents : listContentsArray\n                    });\n                });\n        }else {\n            db.collection(\"users\").doc(this.state.user).collection(\"lists\").doc(id).delete()\n                .then(() => {\n                    console.log(\"Deleting list \" + id + \" from Firestore\");\n                });\n        }\n    }\n\n    render() {\n        console.log(\"App Rendered\");\n        if (this.state.loading)\n            return (<div>Loading</div>);\n        return (\n            <div className=\"App\">\n                <Container>\n                    <Row>\n                        <Col s={3}>\n                            <div id='header'>\n                                <h6>Welcome {this.state.user}</h6>\n                                <h6>Today is {this.state.date}</h6>\n                            </div>\n                            <ListLinks\n                                lists={this.state.lists}\n                                changeListCallback={this.updateActiveList}\n                            />\n                        </Col>\n                        <Col s={9}>\n                            <List\n                                name={this.state.activeList}\n                                items={this.state.listContents[this.state.lists.indexOf(this.state.activeList)]}\n                                type={this.state.listTypes[this.state.lists.indexOf(this.state.activeList)]}\n                                deleteCallback={this.deleteDocument}\n                                createCallback={this.createDocument}\n                            />\n                        </Col>\n                    </Row>\n                </Container>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}